React:
     - React is a JavaScript library for building user interfaces.
     - it is released by Facebook in 2013.(Jordan Walke)
     - React is a declarative, efficient, and flexible JavaScript 
       library for building user interfaces.
     - it is used to develop single-page applications.
     - React is a component-based front-end library.
     - React makes it painless to create interactive UIs.
     - React is used to develop web applications/mobile.
       applications/desktop applications.

---------------------------------------------------------------------------
Who uses react:
    -Facebook
    -Netflix
    -Airbnb
    -Instagram
    -Snapchat
    -Youtube
    -Spotify
    -Tinder
----------------------------------------------------------------
Why use react:
    -High performance with virtual DOM(document object model)
    -Single page applications
    -Easy to learn and implement
    -It is free and open source
    -Huge ecosystem of libraries(React Router, Redux, etc.)
    -Easy to integrate with other existing projects
    -It is fast and efficient
------------------------------------------------------------------------
how to create react project:

steps:
   1. create a folder
   2. open terminal for the folder(cmd)
   3. npx create-react-app project_name
npx: node package execution ,  it is a command line tool that
  allows you to execute npm packages directly from the command line.
   4.cd project_name
   5.npm start

----------------------or-------------------------------
steps:
   1. create a folder
   2. open terminal for the folder(cmd)
   3. npm create vite@latest
                   project_name: name of the project
                   framework :  react
                   variant : JavaScript
   4.cd project_name
   5.npm install (installing dependencies /node packages) 
    npm install bootstrap (installing bootstrap)
    npm install react-router-dom (installing react router dom)
    npm install axios (installing axios library)
     (npm- node package manager)
   6.npm run dev

--------------------------------------------------------------------------
JSX - JavaScript XML(extension of js) 
       (xml- eXtensible Markup Language)
    -we can write html in js
--------------------------------------------------------------------------                   

components:
   ex: header component , footer component , sidebar component etc ..

1.create jsx file
2.declare the component( function)
3.return the jsx code(encapsulate/wrap the jsx code)
  -wrapping can be done 
                 1. using div tag
                 2. using fragment tag <></>
                 3. using template string ``
                 4. using react.fragment <React.Fragment></React.Fragment>
4.export the component 
5.use the component in remaining jsx file 
          (import in main.jsx file)

------------------------------------------------------------------------
component : (ui component)
   ex: header component , footer component , sidebar component etc ..
   - it is a function/class that returns jsx code
   - it is a reusable component
   - it is a file that contains jsx code(html in js file)
   - we can create a component in two ways 
             1. function component
             2. class component
             3. Pure component
             4. Higher order component
             5. Presentational Component
             6. Container Component
             7. Controlled Component
             8. Uncontrolled Component

1.function component:

syntax : 

function component_name(){
    return(
        <>
        //jsx code
        </>
    )
}

2.class component:

syntax :

class component_name extends React.Component{
    render(){
        return(
            <>
            //jsx code
            </>
        )
    }
}
---------------------------------------------------------------------
                         function                        class
            ------------------------------------------------------
syntax:                 js function                 Es6 class syntax
render()                not required                required
state                   useState  hook              this.state
props                   props                       this.props
this key                not required                required
readability             clean                       more boilerplate
preferred               modern standard             older standard(deprecated)
------------------------------------------------------------------
State :
    -state is an object that contains data that the component needs.
    -it is used to store/update/manage data that the component needs 
      to render.
    -we can  modify the state in the component with the help of
      setState() method. or this.setState() method.

syntax: let [state /data, setState]=useState(initialState)
ex: 
   1.let [count, setCount] = useState(0)
   2.let [name , setName] = useState('')
   3.let [user , setUser] = useState({})
   4.let[fruits, setFruits] = useState([])
   5.let[isTrue, setIsTrue] = useState(true)

setState() method:
    -it is used to update the state of the component.
    -it is a function used to update

useState() hook:
      -it is a hook that returns an array of two elements.
      -the first element is the state variable.
      -the second element is the function that updates the state variable.
      -it is used to manage the state of the component.


---------------------------------------------------------------------
props:(properties)
   -props is an object that contains data that the component needs.
   -it is used to pass data from parent component to child component.
   -we can access the props data in the component with the help of props.
   -props are read-only.
   -we can't modify the props data in the component.
   -props are immutable.
   -passing data: number, String , Object , Array, Function etc ..
--------------------------------------------------------------------------------
                           state                          props
            ----------------------------------------------------------------------
definition             used to update             used to pass/transfer(parent->child)
mutability             mutable(can be modified)   immutable (can't be modified)
managed                by itself                   by parent component
access                 by itself                   by child component
                       this.state/useState()       props/{name,age}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------


props drilling :
    -it is a technique that is used to pass data from parent component
     to child component.
ex:  Grand Parent--->Parent--->Child---->Grand Child
    -it makes difficult to code
    -it causes deep component hierarchy
    -it causes code maintainability
    -to avoid props drilling we can use context api or redux
--------------------------------------------------------------------
context api
       -it is a technique that is used to pass data 
        from parent component to child component.
       -it makes easy to code
       -it causes shallow component hierarchy
       -we are creating a context object(global object) with the help
       of createContext() method
       -Provider-used to provide/pass/send the data
       -Consumer-used to consume/receive the data
       -with the help of useContext() hook we can consume the data

createContext():
         - will accept one argument(initialValue/defaultValue)
         - will return a context object

Provider:
         -will accept two arguments(value,children)
         -will return a jsx code

useContext():
         -will accept one argument(context)
         -will return a value/data
-----------------------------------------------------------------------
Container Component:
      -it is a component that contains other components.
      -it holds the state and props of its child components.
      -it is used to manage the state and props of its child components.

Presentational Component:
      -it is a component that contains only UI.
      -it holds the UI of its child components.
      -it is used to manage the UI of its child components.

---------------------------------------------------------------------
style in react:
         1. inline style
         2. External Style
         3. external framework/library(bootstrap)

1.inline style:
  -it is used to provide style with the help of
   style attribute and object
ex:
<button style ={ { key: value} }>click</button>
2.external style:
   -it is used to provide style with the help of
    external css file 
   -then impost css file in respective jsx file

ex: 
import './style.css'
<button>click</button>

3.external framework/library(bootstrap):
   -it is used to provide style with the help of
    cdn or node packages
   -then import bootstrap css file in respective jsx file - for css
   -then import bootstrap js file in respective jsx file - for js

ex:
import 'bootstrap/dist/css/bootstrap.min.css'
import 'bootstrap/dist/js/bootstrap.min.js'

node packages:
cmd: npm install bootstrap@5.3.5
----------------------------------------------------------------------------------------------

 controlled component: 
         - it is a component controlled by the react state(useState hook)
         - it is used to manage the state/props of the component
         - mainly used for form validations , tracking form data
         - accessing the data with the help of value(target) and onChange event

 Uncontrolled component:
        - it is a component controlled by the DOM (useRef hook)
        - it is used to manage the DOM elements of the component
        - mainly used for quick forms, simple forms
        - accessing the data with the help of value(current) and onSubmit / onClick event
      
---------------------------------------------------------------------------------
useRef hook:
        -it is a hook that returns an object.
        -the object contains a current property.
        -the current property contains the DOM element.
        -it is used to manage the DOM elements of the component.
        -it is used to access the DOM elements of the component.

---------------------------------------------------------------------------------

Single page application:(spa)
     -it is a web application that has only one page.
     -SPA is developed by using React,Angular and Vue.
     -this approach allows us for more fluid and responsive 
     user experience.
     -it wont reload/refresh the entire page.

key -characteristics:
      1.dynamic content/ui
      2.client side rendering
      3.DOM manipulation    
      4.State manipulation
      5.API-calls
      6.Server communication
      7.Fast loading time
----------------------------------------------------------------
Dealing with global data (context in react):
-----------------------
  1.creation of context object
      - we are creating a jsx file with the help of createContext() method
      ex : export const GlobalAuthContext = createContext(null);
  2.provider component
      - with the help of provider we are modifying the context object
      ex : <GlobalAuthContext.Provider value={value}>
           </GlobalAuthContext.Provider>
               or
            <GlobalAuthContext.Provider value={{value ,setValue}}>
               {children}
            </GlobalAuthContext.Provider>

  3.Consumer Component
      -with the help os useContext() hook we are consuming the data
      ex : const data = useContext(GlobalAuthContext);

----------------------------------------------------------------
Hooks:
=====
     - react hooks are special functions that allow you to
       use state and other react features
     - hooks are used to manage state and lifecycle
     - hooks are inbuilt in react
     - hooks are introduced in react version 16.8
     

Note:
----
   - hooks are inbuilt function components in react
   - can use hooks inside function component on top of other code like conditional
   ,looping and rendering etc.,

Types:
-------
    1.inbuilt hooks- inbuilt /existing hooks
    2.custom hooks - created by developer/user


1.useState hook:
----------------
      - used to manage state/data in react
      - it returns the current state and a function to update the state
syntax:
    const [state, setState] = useState(initialState); 

state: data that can change over time
setState: function to update the state
initialState: initial value of the state

State :
+++++++
     - state is a variable that holds data that can change over time
     - state is used to manage data in react

2.useRef hook:
----------------
      - used to create a mutable ref object
      - it returns a mutable ref object, which can hold a value
      - it is used to access the DOM element like input values.
syntax:
       const refName = useRef(initialValue);
initialValue is optional

   createRef():
   ===========
         - it creates a ref object and returns it
         - used to add a ref to a component in react
         - it is used to access the DOM element like input values.


3.useContext hook:
------------------
      - used to access the context value
      - it returns the current value of the context
      - it is used to access the context value in react
syntax:
      const contextValue = useContext(ContextName);

Context Api:
------------
   - to avoid props drilling we can use context api
   - context api is used to pass data from parent component to child component
   - context api is used to manage state/data in react
Steps:
     1.create a context object in jsx file
     syntax:
         const ContextName = createContext(initialValue);
     2.create a provider component in jsx file
     syntax:
          <ContextName.Provider value={value}> 
          <ChildComponent />
          </ContextName.Provider>
     3.use the context value in the child component
     syntax:
         const contextValue = useContext(ContextName);


4.useNavigate hook:
----------------
    - used to navigate to another page in react
    - it returns a function that can be used to navigate to another page
    - it is present in react router dom
    - navigate hooks must be enclosed in a route element
syntax:
    const navigate = useNavigate();
    navigate("/path");

---- in main component where we have routes (App.jsx in our case)----
<BrowserRouter>
  <Routes>
    <Route path="/" element={<Home />} />
  <Routes>
</BrowserRouter>

BrowserRouter 
--------------
         - it is used to wrap the routes in react
         - it is mandatory to wrap the routes in react which have navigate hooks
Routes
------
        - it is used to define the routes in react
        - it helps to wrap the multiple route in react
Route
-----
        - it is used to define the route in react
        - it helps to map path with respective component


Link:
-----
         - it is used to navigate to another page in react
         - it is present in react router dom
         - it works like anchor tag but it won't reload the page
   syntax:
      <Link to="/path">Click Here</Link>



| Properties      | <Link>    | <NavLink>   |
|-----------------|-----------|-------------|
| to              |  Yes      |  Yes        |
| replace         |  Yes      |  Yes        |
| reloadDocument  |  Yes      |  Yes        |
| state           |  Yes      |  Yes        |
| end             | No        |  Controls when the link is considered active (exact match) |
| className/style | OnlyStatic|  Accepts a **function** that gets `{ isActive, isPending }` |

When To Use:


 Simple navigation (no active styling needed) -- <Link> 
 Navigation with active styling (e.g., menu bar, tabs, sidebar) --<NavLink>

Outlet:
-------
        - it is used to display the child route with in parent route
        - it is present in react router dom
        - it need to use along with child paths in jsx file

syntax:
     <Link to="/dashboard/user">Click Here For User</Link>
     <Link to="/dashboard/product">Click Here For Product</Link>
      <Outlet />

 --App.jsx---
<BrowserRouter>
  <Routes>
    <Route path="/dashboard" element={<Dashboard />}>
      <Route path="/dashboard/user" element={<User />} />
      <Route path="/dashboard/product" element={<Product />} />
    </Route>
  </Routes>
</BrowserRouter>


5.useEffect hook:
------------------
     - it is used to perform actions after the component is rendered
     - it is used to perform side effects in react , like fetching data from api etc.,
     - it is present in react 
syntax:
        useEffect(() => {
        
       }, []);

    - it accepts two arguments
    - first argument is a function
    - second argument is an array of dependencies
    - useEffect will run the function only when the dependencies change

react life cycle with useEffect hook:
======================================
  
 1.componentDidMount() 
                useEffect(() => {
                    // api call or other side effects
                }, []);
 2.componentDidUpdate()
                useEffect(() => {
                    // api call or other side effects
                }, [dependencies/state/data]);
 3.componentWillUnmount()
                useEffect(() => {
                    return () => {
                        // api call or other side effects
                    };
                }, []);


Mounting: when the component is rendered for the first time,it is called and
          add to the DOM
Updating: when the component is updated
Unmounting: when the component is removed from the DOM


6.useParams hook:
----------------
      - it is used to access/collect the parameters from the url
  syntax:
     url: http://localhost:3000/dashboard/user/1/raj/raj@gmail.com
     
     const params = useParams();
     console.log(params);
     output: {id: "1", name: "raj", email: "raj@gmail.com"}
      
      or
    const name =useParams('name');
    console.log(name);
    output: raj


   <Link to="/dashboard/user/1/raj/raj@gmail.com">Click Here</Link>
   <Route path="/dashboard/user/:id/:name/:email" element={<User />} />
      
7.useSearchParams hook:
----------------
      - it is used to access/collect the search parameters from the url
  syntax:
     url: http://localhost:3000/dashboard/product?name=laptop&price=5000
     const [searchParams] = useSearchParams();
     console.log(searchParams);
     o/p-
     URLSearchParams { 'name' => 'laptop', 'price' => '5000' }
    
    <Link to="/dashboard/product?name=laptop&price=5000">Click Here</Link>
    <Route path="/dashboard/product" element={<Product />} />

8.useLocation hook:
-------------------
              - it is a hook that returns the current location object
              - which contains information about the current location/path
      syntax: 
              const location = useLocation();
              console.log(location);
              output: 
              Location {
                pathname: "/dashboard/user",
                search: "", 
                hash: "", 
                state: undefined, 
                key: "1"
                }



useReducer hook:
---------------
    - it is a hook that returns a state and a dispatch function
    - it is used to manage state in react
    - it helps to deal with complex state logics
    - it is present in react
syntax:
    const [state, dispatch] = useReducer(reducer, initialState);
reducer: a function that takes two arguments and returns the new state
initialState: the initial value of the state
state: the current value of the state
dispatch: a function that takes an action and updates the state

reducer function:
=================
    - it is a function that takes two arguments and returns the new state
    - it is used to manage state in react
    - it helps to deal with complex state logics
 
 syntax:
        function reducer(state, action) {
            //logic to manipulate the state
            return newState
        }

action is an object that contains type and payload
          type is a string that represents the action type and payload is the data
         that is passed to the reducer function
state is the current value of the state



Custom hooks:
-------------
      - it is a function  that created by using js function
      - it is used to create reusable code in react
      - it is used to create custom hooks in react
      - it must be start with use keyword

=================================================================================================

Axios :
------
    - it is a library used to make http requests in react
    - which consist of promise based http client for the browser and node.js
    - it provides get, post, put, delete and patch methods to make http requests

  syntax: 
          axios.get('url')--for get request
          axios.post('url', data)--for post request
          axios.delete('url')--for delete request
          axios.put('url', data)--for put request--------update
          axios.patch('url', data)--for patch request ---operation
         
advantage of axios:
-------------------
    - it is easy to use
    - it is simple to use and understand
    - it is easy to debug


url:
-----
    http://localhost:8080/users/raj--path parameter/variables
    http://localhost:8080/users?name=raj--query parameter/variables
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------






     
                                npm install @reduxjs/toolkit react-redux - to install redux library 
                                npm install redux-thunk - to install redux thunk middleware
                                npm install redux-saga - to install redux saga middleware


Redux:
=======
        - redux is a library for managing state in react
        - it is used to manage  complex state in react
        - it helps to store the state in a single source of truth  and
           make it easy to manage


components of redux:
----------------------
    1.UI - user interface which is used to display the data
         - events are triggered when the user interacts with the UI
         - then the actions are dispatched to the reducer

    2.action: it is an object that contains type and payload
    
    3.dispatch: it is a function that takes an action and dispatches
              it to the reducer
        syntax: 
                import { useDispatch } from "react-redux";
                const dispatch = useDispatch();
                dispatch(action);

    3.reducer: it is a function that takes the current state and 
               an action and returns the new state after the action is dispatched
               and manipulates the state according to the action type
    4.store: it is a single source of truth for the state of the
             application
            : it stores the state of the application after manipulated by the reducer

            syntax:
                    import { createStore } from "redux";
                    const myStore = createStore(reducer);
                         or
                    import { configureStore } from "@reduxjs/toolkit";
                    const myStore = configureStore({
                        reducer: {
                            state: reducer,
                        },
                    });

    5.provider: it is a component that provides the store to the
                rest of the application
                syntax:
                        import { Provider } from "react-redux";
                        <Provider store={myStore}>
                            <App />
                        </Provider>

        
Note : redux is a uni directional state management library
       flow: action -> dispatch -> reducer -> store
              ^                                  |
              |                                  |
            events                              Provider
              |                                  |
              UI---------------------------------+

features of redux:
-----------------
    1.single source of truth
    2.unidirectional data flow
    3.state management
    4.action
    5.reducer
    6.store
    7.middleware

MiddleWare: 
----------
   - it is a function that is called after the action is dispatched
   - it is used to modify the action before it is dispatched
   - it is used to modify the state before it is updated
   - middle ware can be thunk or saga
thunk:
------
   - it is a  pure function that returns a function 
   - it is used to create async actions in redux
saga:
-----
   - it is a generator function that returns an iterator
   - it is used to create async actions in redux
   - it is complex and used to manage the state in redux

-----------------------------------------------------------------------
features                 thunk                       saga
-----------------------------------------------------------------------
syntax                  pure function              generator function

state management        simple state management    complex state management

returns                 returns a function         returns a iterator
-----------------------------------------------------------------------


MERN:(mongodb, express, react, nodejs)
=====
     - It is a full stack web development framework
     - It is a combination of mongodb, express, react, nodejs
     - it helps to create a full stack web application
     - mongodb is a document based database(no sql/non relational database)
     - express is a web framework for nodejs
     - react is a javascript library for building user interfaces
     - nodejs is a javascript runtime environment
  
creating of backend (express server):
-------------------------------------
    1.open terminal and have cmd:
    2.mkdir userBackend
    3.cd userBackend
    4.npm init -y
    5.npm install express cors mongoose dotenv nodemon
    6.npm run dev / npm start

express-server
cors-middleware to allow cross origin resource sharing
mongodb to store data
dotenv to store environment variables
nodemon to run the server

project structure:
-----------------
 userBackend
    |_package.json
    |_package-lock.json
    |_node_modules
    |_.env
    |_server.js
    |_routes
    |   |_userRoutes.js
    |_model
        |_userModel.js



Steps for mongodb:
-----------------
 1.sign in to atlas
 2.create a project
          : click on new project button
          : provide project name-->next-->add members(optional)---> create
 3.create a cluster for project
          :left side -->clusters-->create cluster
          :deploy -- choose free --->provide cluster name --->create
 4.create a database user for project
        -it is important to create a database and connect to backend
        -database access(left side)-->  add new db user
            : Password :
                  userName:admin
                  Password:admin123
                  Database User Privileges: Atlas Admin
            :click on create user
 5.Access IP Address:
         :Network access(left side)-->Access IP Address
         - add new ip address
         -click on add ip address
         -allow access from anywhere (0.0.0.0/0)
         -click on confirm
 6.create db and collections
       : clusters-->
       browse collections--->
       create database(inside collections)--->
       provide : database name
       provide : collection name
       click on create
 7.create a connection links
     -->clusters-->connect--->choose driver--->
        copy the connection string-->click on done



mongodb+srv://admin:admin123@bookcluster.wve30ts.mongodb.net/?retryWrites=true&w=majority&appName=bookCluster
    



atlas  --> project -->cluster-->database--->collection
                                        --->collection
                                        --->collection
                            --->database--->collection
                                        --->collection
                                        --->collection


crud methods from mongodb/mongoose:
------------------------------------
 save operation --save()
 update operation --findByIdAndUpdate(id,body,{new:true})
 delete operation --findByIdAndDelete(id)
 find operation --find()
 find by id operation --findById(id)



 server.js
 ---------
const express=require('express'); // to deal with express server
const mongoose=require('mongoose');// to deal with db
const cors=require('cors');// to deal with frontend cors
const env=require('dotenv'); // to deal with environment variables
const userRoutes=require('provide route location');//to deal with end points


//creating application
const app=express();
app.use(cors()); //application middleware to connect frontend
app.use(express.json()); //application middleware
app.use('/enPoint', userRoutes); //application middleware to use user routes


//connecting to db
mongoose.connect(env.config().parsed.MONGODB_URL, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  dbName: "dbName"
})
.then(() => {
  console.log("Connected to MongoDB");
  app.listen(env.config().parsed.PORT, () => {
    console.log(`Server running on port ${env.config().parsed.PORT}`);
  });
})
.catch((error) => {
  console.error("MongoDB connection error:", error);
});


